/*Documentação: http://www2.cs.tum.edu/projects/cup/*/
import java_cup.runtime.*;
import SintexAnalysis.Tokens;

parser code {:
    // conectar esse parser ao scanner!
    Scanner s;
    // Parser(Scanner s){ this.s=s; }

    // tabela de símbolos
    java.util.Map<String, Integer> simbolos = new java.util.HashMap<String, Integer>();
:}

/* conectar esse parser ao scanner! */
init with {:  :};
scan with {: return s.next_token(); :};

/* Terminais (tokens retornados pelo scanner). */
terminal            RSV_PROGRAMA, RSV_PROCEDIMENTO, RSV_BEGIN, RSV_END, RSV_IF, RSV_THEN, RSV_ELSE, RSV_WHILE, RSV_DO, RSV_READ, RSV_WRITE, RSV_VAR, RSV_TRUE, RSV_FALSE, TIPO_INT, TIPO_BOOLEAN, OPERADOR_LOGICO_DIFERENCA, OPERADOR_LOGICO_MENOR, OPERADOR_LOGICO_MENOR_IGUAL, OPERADOR_LOGICO_MAIOR_IGUAL, OPERADOR_LOGICO_MAIOR, OPERADOR_LOGICO_IGUALDADE, OPERADOR_LOGICO_AND, OPERADOR_LOGICO_OR, OPERADOR_LOGICO_NOT, OPERADOR_ARITMETICO_ATRIBUICAO, OPERADOR_ARITMETICO_ADICAO, OPERADOR_ARITMETICO_SUBTRACAO, OPERADOR_ARITMETICO_MULTIPLICACAO, OPERADOR_ARITMETICO_DIVISAO, PARENTESES_ESQ, PARENTESES_DIR, SIMBOLO_DOIS_PONTOS, SIMBOLO_VIRGULA, SIMBOLO_PONTO_E_VIRGULA, SIMBOLO_TERMINACAO, IDENTIFICADOR, NUMERO_INTEIRO, LETRA, DIGITO, COMENTARIO_UMA_LINHA, COMENTARIO_MULT_LINHAS, ERRO_COMENTARIO_MULT_LINHAS_SEM_FECHAR, ERRO_COMENTARIO_MULT_LINHAS_SEM_ABRIR, DELIMITADOR, ERRO_SIMBOLO_INVALIDO, ERRO_TAM_MAX_NUMERO, ERRO_TAM_MAX_IDENTIFICADOR, ERRO;
terminal Integer    NUMERO;        

/* Não terminais */
non terminal            inicio;
non terminal Integer    exp;      // utilizado para armazenar as subexpressões avaliadas

/* Regras da Gramática 
S ->  S E ;
    | E ;

E ->  E + E
    | E - E
    | E * E
    | - E
    | ( E )
    | n
    | i
    | i = E
*/

inicio ::= RSV_PROGRAMA {: System.out.println(RSV_PROGRAMA); :}
;