/*Documentação: http://www2.cs.tum.edu/projects/cup/*/
import java_cup.runtime.*;
import SintexAnalysis.Tokens;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

parser code {:
    // conectar esse parser ao scanner!
    Scanner s;
    public void Connection(java_cup.runtime.Scanner s){ this.s=s; }

    public ArrayList<String> listaDeErros = new ArrayList<>();
    
    public ArrayList<String> getListaDeErros() {
      return listaDeErros;
    }

    public int error_sync_size(){
        return 1;
    }

    protected void report_expected_token_ids(){
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>();
        for (Integer expected : ids){
          String token = symbl_name_from_id(expected);
          if(token != "error")
            list.add(token);
        }
        getListaDeErros().add("[ERRO DE SINTÁXE] Falta dos símbolos (tokens): "+list);
        System.out.println(getListaDeErros());
    }

    public void report_error(String message, Object info) {
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                getListaDeErros().add("Linha "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0){                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    getListaDeErros().add("Coluna "+(s.right+1));
                }
                /*if(s.value != null)
                    //listaDeErros.add("Faltou o símbolo:"+(s.value));*/
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        //listaDeErros.add(" : "+message);
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        //System.err.println(listaDeErros);
    }
    
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
    
:}

/* conectar esse parser ao scanner! */
init with {:  :};
scan with {: return s.next_token(); :};

/* Terminais (tokens retornados pelo scanner). */
terminal            RSV_PROGRAMA, RSV_PROCEDIMENTO, RSV_BEGIN, RSV_END, RSV_IF, RSV_THEN, RSV_ELSE, RSV_WHILE, RSV_DO, RSV_READ, RSV_WRITE, RSV_VAR, RSV_TRUE, RSV_FALSE, TIPO_INT, TIPO_BOOLEAN, OPERADOR_LOGICO_DIFERENCA, OPERADOR_LOGICO_MENOR, OPERADOR_LOGICO_MENOR_IGUAL, OPERADOR_LOGICO_MAIOR_IGUAL, OPERADOR_LOGICO_MAIOR, OPERADOR_LOGICO_IGUALDADE, OPERADOR_LOGICO_AND, OPERADOR_LOGICO_OR, OPERADOR_LOGICO_NOT, OPERADOR_ARITMETICO_ATRIBUICAO, OPERADOR_ARITMETICO_ADICAO, OPERADOR_ARITMETICO_SUBTRACAO, OPERADOR_ARITMETICO_MULTIPLICACAO, OPERADOR_ARITMETICO_DIVISAO, PARENTESES_ESQ, PARENTESES_DIR, SIMBOLO_DOIS_PONTOS, SIMBOLO_VIRGULA, SIMBOLO_PONTO_E_VIRGULA, SIMBOLO_TERMINACAO, COMENTARIO_UMA_LINHA, COMENTARIO_MULT_LINHAS, ERRO_COMENTARIO_MULT_LINHAS_SEM_FECHAR, ERRO_COMENTARIO_MULT_LINHAS_SEM_ABRIR, DELIMITADOR, ERRO_SIMBOLO_INVALIDO, ERRO_TAM_MAX_NUMERO, ERRO_TAM_MAX_IDENTIFICADOR, ERRO;
terminal Integer    DIGITO, NUMERO_INTEIRO;
terminal String    LETRA, IDENTIFICADOR;      

/* Não terminais */
non terminal            parteDV, DV, listaID, listaID1, parteDV2, parteDV1;
// non terminal Integer    exp;

/* Regras da Gramática 

// PDF
1. <parte de declarações de variáveis> ::= <declaração de variáveis> {; <declaração de variáveis>};
2. <declaração de variáveis>::= <tipo> <lista de identificadores>
3. <lista de identificadores> ::= <identificador> {, <identificador>}

// Com terminais e não terminais
1. <parteDV> ::= <DV> {SIMBOLO_PONTO_E_VIRGULA <DV>}SIMBOLO_PONTO_E_VIRGULA
2. <DV> ::= <TIPO_BOOLEAN ou TIPO_INT> <listaID>
3. <listaID> ::= <IDENTIFICADOR> {SIMBOLO_VIRGULA <IDENTIFICADOR>}

// Trabalhando com a gramática

Eu imagino que seria algo assim:

    parteDV ::= DV parteDV1                 {: System.out.println("parteDV"); :}
    ;

    parteDV1 ::= ; parteDV2                 {: System.out.println("parteDV1"); :}
    ;

    parteDV2 ::= parteDV                    {: System.out.println("parteDV2"); :}
             |                              {: System.out.println("parteDV2 FIM"); :}
    ;

    DV ::= TIPO_BOOLEAN listaID             {: System.out.println("DV booleano"); :}
        | TIPO_INT listaID                  {: System.out.println("DV int"); :}
        | error                             {: System.out.println("DV ERRO: tipo indefinido"); :}
    ;

    listaID ::= IDENTIFICADOR listaID1      {: System.out.println("listaID"); :}
    ;

    listaID1 ::= , listaID                  {: System.out.println("listaID1"); :}
             |                              {: System.out.println("listaID1 FIM"); :}
    ;

Em gramática:
    
    S -> BA

    A -> ; E

    E -> S
    E -> VAZIO

    B -> boolean C
    B -> int C

    C -> nome D

    D -> , C
    D -> VAZIO

*/

parteDV ::= DV parteDV1                         {: System.out.println("parteDV"); :}
;

parteDV1 ::= SIMBOLO_PONTO_E_VIRGULA parteDV2   {: System.out.println("parteDV1"); :}
;

parteDV2 ::= parteDV                            {: System.out.println("parteDV2"); :}
         |                                      {: System.out.println("FIM"); :}
;

DV ::= TIPO_BOOLEAN listaID                     {: System.out.println("DV booleano"); :}
    | TIPO_INT listaID                          {: System.out.println("DV int"); :}
    | error                                     {: System.out.println("ERRO: Tipo indefinido"); :}
;

listaID ::= IDENTIFICADOR listaID1              {: System.out.println("listaID"); :}
         | error                                {: System.out.println("ERRO: Faltou  identificador"); :}  
;

listaID1 ::= SIMBOLO_VIRGULA listaID            {: System.out.println("listaID1"); :}
         |                                      {: System.out.println("listaID1 FIM"); :}
         | error                                {: System.out.println("ERRO: Faltou  vírgula"); :}  
;