
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package SintexAnalysis;

import java_cup.runtime.*;
import SintexAnalysis.Tokens;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Tokens.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\004\000\002\002\004\000\002\007" +
    "\004\000\002\006\003\000\002\006\002\000\002\003\004" +
    "\000\002\003\004\000\002\003\003\000\002\004\004\000" +
    "\002\004\003\000\002\005\004\000\002\005\002\000\002" +
    "\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\023\000\010\003\005\022\010\023\004\001\002\000" +
    "\006\003\012\064\013\001\002\000\004\046\ufffa\001\002" +
    "\000\004\002\024\001\002\000\004\046\021\001\002\000" +
    "\006\003\012\064\013\001\002\000\004\046\ufffb\001\002" +
    "\000\004\046\ufff8\001\002\000\010\003\015\045\016\046" +
    "\ufff6\001\002\000\004\046\ufff9\001\002\000\004\046\ufff5" +
    "\001\002\000\006\003\012\064\013\001\002\000\004\046" +
    "\ufff7\001\002\000\004\002\001\001\002\000\012\002\ufffd" +
    "\003\005\022\010\023\004\001\002\000\004\002\ufffe\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\000\001\002" +
    "\000\004\046\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\023\000\006\002\005\003\006\001\001\000\004\004" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\017\001\001\000\004\004\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\021\003\006" +
    "\006\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // conectar esse parser ao scanner!
    Scanner s;
    public void Connection(java_cup.runtime.Scanner s){ this.s=s; }

    public ArrayList<String> listaDeErros = new ArrayList<>();
    
    public ArrayList<String> getListaDeErros() {
      return listaDeErros;
    }

    public int error_sync_size(){
        return 1;
    }

    protected void report_expected_token_ids(){
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>();
        for (Integer expected : ids){
          String token = symbl_name_from_id(expected);
          if(token != "error")
            list.add(token);
        }
        getListaDeErros().add("[ERRO DE SINTÁXE] Falta dos símbolos (tokens): "+list);
        System.out.println(getListaDeErros());
    }

    public void report_error(String message, Object info) {
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                getListaDeErros().add("Linha "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0){                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    getListaDeErros().add("Coluna "+(s.right+1));
                }
                /*if(s.value != null)
                    //listaDeErros.add("Faltou o símbolo:"+(s.value));*/
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        //listaDeErros.add(" : "+message);
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        //System.err.println(listaDeErros);
    }
    
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // parteDV ::= DV parteDV1 
            {
              Object RESULT =null;
		 System.out.println("parteDV"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parteDV",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= parteDV EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // parteDV1 ::= SIMBOLO_PONTO_E_VIRGULA parteDV2 
            {
              Object RESULT =null;
		 System.out.println("parteDV1"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parteDV1",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // parteDV2 ::= parteDV 
            {
              Object RESULT =null;
		 System.out.println("parteDV2"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parteDV2",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // parteDV2 ::= 
            {
              Object RESULT =null;
		 System.out.println("FIM"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parteDV2",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DV ::= TIPO_BOOLEAN listaID 
            {
              Object RESULT =null;
		 System.out.println("DV booleano"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DV",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DV ::= TIPO_INT listaID 
            {
              Object RESULT =null;
		 System.out.println("DV int"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DV",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DV ::= error 
            {
              Object RESULT =null;
		 System.out.println("ERRO: Tipo indefinido"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DV",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listaID ::= IDENTIFICADOR listaID1 
            {
              Object RESULT =null;
		 System.out.println("listaID"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaID",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listaID ::= error 
            {
              Object RESULT =null;
		 System.out.println("ERRO: Faltou  identificador"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaID",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listaID1 ::= SIMBOLO_VIRGULA listaID 
            {
              Object RESULT =null;
		 System.out.println("listaID1"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaID1",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // listaID1 ::= 
            {
              Object RESULT =null;
		 System.out.println("listaID1 FIM"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaID1",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // listaID1 ::= error 
            {
              Object RESULT =null;
		 System.out.println("ERRO: Faltou  vírgula"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaID1",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
