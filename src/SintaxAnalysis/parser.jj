//Opções do JavaCC
options{
STATIC = false;
DEBUG_LOOKAHEAD = false;
}

//Parser
PARSER_BEGIN(Parser)
//Imports do Java

package SintaxAnalysis;
import java.io.*;
import java.util.*;

//Classe Parser
public class Parser{

    boolean Menosshort = false; //Saida resumida falso
    ArrayList<String> listaErrosSintax = new ArrayList<>();
    String tipo =  "";

    public ArrayList <String> getListaErrosSintax(){
        return listaErrosSintax;
    }


    //Método main
    /*public static void main(String args[], String x) throws ParseException, FileNotFoundException {
        try {

        }catch (Error e){
            System.out.println(e.getMessage()); //Mensagem de erro léxico (em ingles) mostrando linha e coluna
        }
    }*/
}

PARSER_END(Parser)


//Declaração de Tokens
SKIP : // TOKENS IGNORADOS
{
 " "
| "\r" 
| "\t" 
| "\n"
}

TOKEN : //PALAVRAS RESERVADAS
{
    <RSV_PROGRAMA: "program"> 
    |<RSV_PROCEDIMENTO: "procedure"> 
    |<RSV_BEGIN: "begin"> 
    |<RSV_END: "end"> 
    |<RSV_IF: "if"> 
    |<RSV_THEN: "then"> 
    |<RSV_ELSE: "else"> 
    |<RSV_WHILE: "while"> 
    |<RSV_DO: "do"> 
    |<RSV_READ: "read">
    |<RSV_WRITE: "write">
    |<RSV_VAR: "var"> 
    |<RSV_FIM: <RSV_END>"."> 
}

TOKEN : //TIPOS
{
    <TIPO_INT: "int"> 
    |<TIPO_BOOLEAN: "boolean"> 
}

TOKEN : //OPERADORES E SÍMBOLOS
{
    <OPERADOR_LOGICO_DIFERENCA: "<>"> 
    |<OPERADOR_LOGICO_IGUAL_IGUAL: "=="> 
    |<OPERADOR_LOGICO_MENOR: "<"> 
    |<OPERADOR_LOGICO_MENOR_IGUAL: "<="> 
    |<OPERADOR_LOGICO_MAIOR_IGUAL: ">="> 
    |<OPERADOR_LOGICO_MAIOR: ">"> 
    |<OPERADOR_LOGICO_IGUALDADE: "="> 
    |<OPERADOR_LOGICO_AND: "and"> 
    |<OPERADOR_LOGICO_OR: "or"> 
    |<OPERADOR_LOGICO_NOT: "not"> 
    |<OPERADOR_ARITMETICO_ATRIBUICAO: ":="> 
    |<OPERADOR_ARITMETICO_ADICAO: "+"> 
    |<OPERADOR_ARITMETICO_SUBTRACAO: "-"> 
    |<OPERADOR_ARITMETICO_MULTIPLICACAO: "*"> 
    |<OPERADOR_ARITMETICO_DIVISAO: "div"> 
    |<PARENTESES_ESQ: "("> 
    |<PARENTESES_DIR: ")"> 
    |<SIMBOLO_DOIS_PONTOS: ":"> 
    |<SIMBOLO_VIRGULA:  ","> 
    |<SIMBOLO_PONTO_E_VIRGULA: ";"> 
    |<SIMBOLO_PONTO: "."> 

}

TOKEN : //NÚMEROS E IDENTIFICADORES
{

    <IDENTIFICADOR: <LETRA> (<LETRA>|<DIGITO>){0,14}> 
    //|<IDENTIFICADOR_CHAMADA_PROCEDIMENTO: <IDENTIFICADOR>> 
    |<NUMERO_INTEIRO: (<DIGITO>){1,8}> 
    |<#LETRA: ["_", "a"-"z", "A"-"Z"] >
    |<#DIGITO: ["0" - "9"] >
}
 
TOKEN: //CONSTRUTORES COMENTARIOS
{
    <#COM: ~["\n", "\r", "\t"]>
    |<#COM_MULT: ~["}"]>
    |<#COM_MULT_ERRO_ABRIR: ~["{"]>
}

SPECIAL_TOKEN : { //COMENTARIOS E ERROS
    <COMENTARIO_UMA_LINHA: "//"(<COM>)*"\n"> 
    |<COMENTARIO_MULT_LINHAS: "{"(<COM_MULT>)*"}" > 
    |<ERRO_SIMBOLO_INVALIDO_COMENTARIO: "/"> 
    |<ERRO_COMENTARIO_MULT_LINHAS_SEM_FECHAR: "{">  
    |<ERRO_COMENTARIO_MULT_LINHAS_SEM_ABRIR: "}" >   //{System.out.println("Não abriu: " + image);}
    |<ERRO_OVERFLOW_INT: (<DIGITO>){9,} > 
    |<ERRO_OVERFLOW_IDENTIFICADOR: <LETRA> (<LETRA>|<DIGITO>){15,} > 
    |<ERRO_SIMBOLO_INVALIDO: ~["_", "a"-"z", "A"-"Z", "0" - "9", ".", ";", ",", ")", "(", "*", "+", ":", "=", ">", "<", "/"]> 
}




///////////////////////////////////////////
/////////////Análise Sintática/////////////
//////////////////////////////////////////

JAVACODE
    void error_skipto(ParseException e, ArrayList<Integer> sincronizadores) {
      String erro = e.toString();
      //System.out.println(erro);  // print the error message
      armazenamentoErros(erro);
      Token t;
      // consume tokens all the way up to a token of "kind" - use a do-while loop
      // rather than a while because the current token is the one immediately before
      // the erroneous token (in our case the token immediately before what should
      // have been "if"/"while".
      do {
        t = getNextToken();
        System.out.println(t.kind);
      }
      while (!sincronizadores.contains(t.kind));
    }

JAVACODE
    void armazenamentoErros(String erro) {
        //String erro = e.toString();
        String parametroErro = "Was expecting";
        String[] split = erro.split(parametroErro);
        String comecoErro = split[0];
        for(String str : listaErrosSintax) {
            String[] parte = str.split(parametroErro);
            String comecoErro1 = parte[0];
            if(comecoErro1.equals(comecoErro))
                return;
        }
        listaErrosSintax.add(erro); // save the error message
    }

JAVACODE
    void teste(int kind) {
      ParseException e = generateParseException();  // generate the exception object
      String erro = e.toString();
      //System.out.println(erro);  // print the error message
      armazenamentoErros(erro);
      Token t;
      // consume tokens all the way up to a token of "kind" - use a do-while loop
      // rather than a while because the current token is the one immediately before
      // the erroneous token (in our case the token immediately before what should
      // have been "if"/"while".
      do {
        t = getNextToken();
      }
      while (t.kind != kind);
    }

void principal(): {Token t = new Token();}
{
    try {
        programa()
        <EOF>
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF)));
    }
}

void programa(): {Token t = new Token();}
{
    try {
        <RSV_PROGRAMA> { t = getToken(0); System.out.println("RSV_PROGRAMA Sintax: "+t.image); }
        <IDENTIFICADOR> { 
        t = getToken(0); System.out.println("IDENTIFICADOR Sintax: "+t.image); 
        }
        <SIMBOLO_PONTO_E_VIRGULA> { t = getToken(0); System.out.println("SIMBOLO_PONTO_E_VIRGULA Sintax: "+t.image); }
        [ parteDeclaracaoVariaveis() ]
        [ parteDeclaracaoSubrotinas() ] 
        auxPrograma()
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        bloco();
        //System.out.println("!!!! PROGRAMA !!!!");
    }
}


void auxPrograma(): {Token t = new Token();}
{
    try {
        <RSV_BEGIN> { t = getToken(0); System.out.println("RSV_BEGIN Sintax: "+t.image); }
        comando()
        ( <SIMBOLO_PONTO_E_VIRGULA> { t = getToken(0); System.out.println("SIMBOLO_PONTO_E_VIRGULA Sintax: "+t.image); }
          comando() )*
        <RSV_FIM> { t = getToken(0); System.out.println("RSV_FIM Sintax: "+t.image); }
    }catch (ParseException e) {
        Token token = new Token();
        token = getToken(0);
        if(token.kind == RSV_END)
            error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        else {
            comando();
            armazenamentoErros(e.toString());
        }
    }
}

void bloco(): {Token t = new Token();}
{
    try {
        [ parteDeclaracaoVariaveis() ]
        [ parteDeclaracaoSubrotinas() ]
        comandoComposto()
    }catch (ParseException e) {
        armazenamentoErros(e.toString());
        //error_skipto(e, new ArrayList<>(Arrays.asList(EOF)));
        bloco();
    }
}

void parteDeclaracaoVariaveis(): {Token t = new Token();}
{
    try {
        declaracaoVariavel()
        <SIMBOLO_PONTO_E_VIRGULA> { t = getToken(0); System.out.println("SIMBOLO_PONTO_E_VIRGULA Sintax: "+t.image); }
        auxParteDeclaracaoVariaveis()
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, RSV_BEGIN)));
        comando();
        //System.out.println("!!!! parteDeclaracaoVariaveis !!!!");
    }
}

void auxParteDeclaracaoVariaveis(): {Token t = new Token();}
{
    try {
        declaracaoVariavel()
        <SIMBOLO_PONTO_E_VIRGULA> { t = getToken(0); System.out.println("SIMBOLO_PONTO_E_VIRGULA Sintax: "+t.image); }
        auxParteDeclaracaoVariaveis()
        | {}
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, RSV_BEGIN)));
        comando();
        System.out.println("!!!! auxParteDeclaracaoVariaveis !!!!");
    }
}

void declaracaoVariavel(): {Token t = new Token();}
{
   try {
    ( ( <TIPO_BOOLEAN> { t = getToken(0); System.out.println("TIPO_BOOLEAN Sintax: "+t.image); }
        |<TIPO_INT> { t = getToken(0); System.out.println("TIPO_INT Sintax: "+t.image); } )
    listaIdentificadores() )
   }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, RSV_BEGIN)));
        comando();
   }
}

void listaIdentificadores(): {Token t = new Token();}
{
    try {
        <IDENTIFICADOR> { 
        t = getToken(0); System.out.println("IDENTIFICADOR Sintax: "+t.image); 
        }

        (
          <SIMBOLO_VIRGULA> { t = getToken(0); System.out.println("SIMBOLO_VIRGULA Sintax: "+t.image); }
          <IDENTIFICADOR> { t = getToken(0); System.out.println("IDENTIFICADOR Sintax: "+t.image); }
        )*
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, RSV_BEGIN)));
        comando();
    }
}

void parteDeclaracaoSubrotinas(): {Token t = new Token();}
{
    try {
        ( declaracaoProcedimento() 
          <SIMBOLO_PONTO_E_VIRGULA> { t = getToken(0); System.out.println("SIMBOLO_PONTO_E_VIRGULA Sintax: "+t.image); }
        )+
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        /* error_skipto(new ArrayList<>(Arrays.asList(SIMBOLO_PONTO_E_VIRGULA, SIMBOLO_PONTO)));
        return; */
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, RSV_BEGIN)));
        comando();
    }
}

void declaracaoProcedimento(): {Token t = new Token();}
{
    try {
        <RSV_PROCEDIMENTO> { t = getToken(0); System.out.println("RSV_PROCEDIMENTO Sintax: "+t.image); }
        <IDENTIFICADOR> { t = getToken(0); System.out.println("IDENTIFICADOR Sintax: "+t.image); }
        [ parametrosFormais() ]
        <SIMBOLO_PONTO_E_VIRGULA> { t = getToken(0); System.out.println("SIMBOLO_PONTO_E_VIRGULA Sintax: "+t.image); }
        bloco()
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        /* error_skipto(new ArrayList<>(Arrays.asList(SIMBOLO_PONTO_E_VIRGULA)));
        parteDeclaracaoSubrotinas(); */
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, RSV_BEGIN)));
        comando();
    }
}

void parametrosFormais(): {Token t = new Token();}
{
    try {
        <PARENTESES_ESQ> { t = getToken(0); System.out.println("PARENTESES_ESQ Sintax: "+t.image); }
        secaoParametrosFormais()
        ( <SIMBOLO_PONTO_E_VIRGULA> { t = getToken(0); System.out.println("SIMBOLO_PONTO_E_VIRGULA Sintax: "+t.image); }
          secaoParametrosFormais() )*
        <PARENTESES_DIR> { t = getToken(0); System.out.println("PARENTESES_DIR Sintax: "+t.image); }
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        /* error_skipto(new ArrayList<>(Arrays.asList(SIMBOLO_PONTO_E_VIRGULA)));
        bloco(); */
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, RSV_BEGIN)));
        comando();
    }
}

void secaoParametrosFormais(): {Token t = new Token();}
{
    try {
        [ <RSV_VAR> { t = getToken(0); System.out.println("RSV_VAR Sintax: "+t.image); } ]
        listaIdentificadores()
        <SIMBOLO_DOIS_PONTOS> { t = getToken(0); System.out.println("SIMBOLO_DOIS_PONTOS Sintax: "+t.image); }
        ( <TIPO_BOOLEAN> { t = getToken(0); System.out.println("TIPO_BOOLEAN Sintax: "+t.image); }
          |<TIPO_INT> { t = getToken(0); System.out.println("TIPO_INT Sintax: "+t.image); } )
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, RSV_BEGIN)));
        comando();
    }
}

void comandoComposto() : {Token t = new Token();}
{
    try {
        <RSV_BEGIN> { t = getToken(0); System.out.println("RSV_BEGIN Sintax: "+t.image); }
        comando()
        ( <SIMBOLO_PONTO_E_VIRGULA> { t = getToken(0); System.out.println("SIMBOLO_PONTO_E_VIRGULA Sintax: "+t.image); }
          comando() )*
        <RSV_END> { t = getToken(0); System.out.println("RSV_END Sintax: "+t.image); }
    }catch (ParseException e) {
        //error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        Token token = new Token();
        token = getToken(0);
        if(token.kind == RSV_END)
            error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        else {
            comando();
            armazenamentoErros(e.toString());
        }
    }
}

void comando() : {Token t = new Token();}
{
    try {
        atribuicao()
        |chamadaProcedimento()
        |comandoComposto()
        |comandoCondicional()
        |comandoRepetitivo()
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF)));
    }
}

void comandoRepetitivo() : {Token t = new Token();}
{
    try {
        <RSV_WHILE> { t = getToken(0); System.out.println("RSV_WHILE Sintax: "+t.image); }
        expressao()
        <RSV_DO> { t = getToken(0); System.out.println("RSV_DO Sintax: "+t.image); }
        comando()
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, RSV_DO, SIMBOLO_PONTO_E_VIRGULA)));
        comando();
    }
}

void comandoCondicional() : {Token t = new Token();}
{
    try {
        <RSV_IF> { t = getToken(0); System.out.println("RSV_IF Sintax: "+t.image); }
        expressao()
        <RSV_THEN> { t = getToken(0); System.out.println("RSV_THEN Sintax: "+t.image); }
        comando()
        auxComandoCondicional()
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, RSV_THEN, SIMBOLO_PONTO_E_VIRGULA)));
        comando();
    }
}

void auxComandoCondicional() : {Token t = new Token();}
{
    try {
        <RSV_ELSE> { t = getToken(0); System.out.println("RSV_ELSE Sintax: "+t.image); }
          comando()
        | {}
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        comando();
    }
}

void chamadaProcedimento() : {Token t = new Token();}
{
    try {
        ( <RSV_READ> { t = getToken(0); System.out.println("RSV_READ Sintax: "+t.image); }
          | <RSV_WRITE> { t = getToken(0); System.out.println("RSV_WRITE Sintax: "+t.image); } )
        <PARENTESES_ESQ> { t = getToken(0); System.out.println("PARENTESES_ESQ Sintax: "+t.image); }
        [ listaExpressoes() ]
        <PARENTESES_DIR> { t = getToken(0); System.out.println("PARENTESES_DIR Sintax: "+t.image); }
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        comando();
    }
}

void atribuicao() : {Token t = new Token();}
{
    try {
        variavel()
        <OPERADOR_ARITMETICO_ATRIBUICAO> { t = getToken(0); System.out.println("OPERADOR_ARITMETICO_ATRIBUICAO Sintax: "+t.image); }
        expressao()
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        comando();
    }
}

void listaExpressoes() : {Token t = new Token();}
{
    try {
        expressao()
        ( <SIMBOLO_VIRGULA> { t = getToken(0); System.out.println("SIMBOLO_VIRGULA Sintax: "+t.image); }
          expressao() )*
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        comando();
    }
}

void expressao() : {Token t = new Token();}
{
    try {
        expressaoSimples()
        auxExpressao()
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF)));
    }
}

void auxExpressao() : {Token t = new Token();}
{
    try {
        relacao() expressaoSimples()
        | {}
    }catch (ParseException e) {
       //armazenamentoErros(e.toString());
       error_skipto(e, new ArrayList<>(Arrays.asList(EOF)));
    }
}

void expressaoSimples() : {Token t = new Token();}
{
    try {
        [ <OPERADOR_ARITMETICO_ADICAO> { t = getToken(0); System.out.println("OPERADOR_ARITMETICO_ADICAO Sintax: "+t.image); }
          |<OPERADOR_ARITMETICO_SUBTRACAO> { t = getToken(0); System.out.println("OPERADOR_ARITMETICO_SUBTRACAO Sintax: "+t.image); } ]
        termo()
        auxExpressaoSimples()
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        comando();
    }
}

void auxExpressaoSimples() : {Token t = new Token();}
{
    try {
        ( <OPERADOR_ARITMETICO_ADICAO> { t = getToken(0); System.out.println("OPERADOR_ARITMETICO_ADICAO Sintax: "+t.image); }
          |<OPERADOR_ARITMETICO_SUBTRACAO> { t = getToken(0); System.out.println("OPERADOR_ARITMETICO_SUBTRACAO Sintax: "+t.image); }
          |<OPERADOR_LOGICO_OR> { t = getToken(0); System.out.println("OPERADOR_LOGICO_OR Sintax: "+t.image); } )
        termo()
        auxExpressaoSimples()
        | {}
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        comando();
    }
}

void termo() : {Token t = new Token();}
{
    try {
        fator()
        auxTermo()
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF)));
    }
}

void auxTermo() : {Token t = new Token();}
{
    try {
        ( <OPERADOR_ARITMETICO_MULTIPLICACAO> { t = getToken(0); System.out.println("OPERADOR_ARITMETICO_MULTIPLICACAO Sintax: "+t.image); }
          |<OPERADOR_ARITMETICO_DIVISAO> { t = getToken(0); System.out.println("OPERADOR_ARITMETICO_DIVISAO Sintax: "+t.image); }
          |<OPERADOR_LOGICO_AND> { t = getToken(0); System.out.println("OPERADOR_LOGICO_AND Sintax: "+t.image); } )
        fator()
        auxTermo()
        | {}
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        comando();
    }
}

void fator() : {Token t = new Token();}
{
    try {
        variavel()
        |<NUMERO_INTEIRO> { t = getToken(0); System.out.println("NUMERO_INTEIRO Sintax: "+t.image); }
        |( <PARENTESES_ESQ> { t = getToken(0); System.out.println("PARENTESES_ESQ Sintax: "+t.image); }
           expressao()
           <PARENTESES_DIR> { t = getToken(0); System.out.println("PARENTESES_DIR Sintax: "+t.image); } )
        |( <OPERADOR_LOGICO_NOT> { t = getToken(0); System.out.println("OPERADOR_LOGICO_NOT Sintax: "+t.image); }
           fator() )
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        comando();
    }
}

void variavel() : {Token t = new Token();}
{
    try {
        <IDENTIFICADOR> { t = getToken(0); System.out.println("IDENTIFICADOR Sintax: "+t.image); }
        auxVariavel()
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        comando();
    }
}

void auxVariavel() : {Token t = new Token();}
{
    try {
        expressao()
        | {}
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF)));
    }
}

void relacao() : {Token t = new Token();}
{
    try {
        <OPERADOR_LOGICO_IGUAL_IGUAL> { t = getToken(0); System.out.println("OPERADOR_LOGICO_IGUAL_IGUAL Sintax: "+t.image); }
        |<OPERADOR_LOGICO_DIFERENCA> { t = getToken(0); System.out.println("OPERADOR_LOGICO_DIFERENCA Sintax: "+t.image); }
        |<OPERADOR_LOGICO_MENOR> { t = getToken(0); System.out.println("OPERADOR_LOGICO_MENOR Sintax: "+t.image); }
        |<OPERADOR_LOGICO_MENOR_IGUAL> { t = getToken(0); System.out.println("OPERADOR_LOGICO_MENOR_IGUAL Sintax: "+t.image); }
        |<OPERADOR_LOGICO_MAIOR_IGUAL> { t = getToken(0); System.out.println("OPERADOR_LOGICO_MAIOR_IGUAL Sintax: "+t.image); }
        |<OPERADOR_LOGICO_MAIOR> { t = getToken(0); System.out.println("OPERADOR_LOGICO_MAIOR Sintax: "+t.image); }
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        comando();
    }
}