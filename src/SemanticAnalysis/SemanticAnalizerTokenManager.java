/* SemanticAnalizerTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. SemanticAnalizerTokenManager.java */
package JavaCC;
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;
import Utils.SemanticTableObject;
import Utils.SemanticTable;

/** Token Manager. */
@SuppressWarnings ("unused")
public class SemanticAnalizerTokenManager implements SemanticAnalizerConstants {
    int countLexError = 0;
    public int foundLexError () {
        return countLexError;
    }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2400L) != 0L)
         {
            jjmatchedKind = 43;
            return 2;
         }
         if ((active0 & 0x10e037dbc0L) != 0L)
         {
            jjmatchedKind = 43;
            return 77;
         }
         if ((active0 & 0x7ef1fc0000aL) != 0L)
            return 78;
         return -1;
      case 1:
         if ((active0 & 0x40008800L) != 0L)
            return 79;
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 1;
            return 0;
         }
         if ((active0 & 0x10a03773c0L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 1;
            return 79;
         }
         if ((active0 & 0x106c00000L) != 0L)
            return 78;
         return -1;
      case 2:
         if ((active0 & 0x10a0140000L) != 0L)
            return 80;
         if ((active0 & 0x2373c0L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
            return 80;
         }
         if ((active0 & 0x400L) != 0L)
            return 1;
         return -1;
      case 3:
         if ((active0 & 0x13040L) != 0L)
            return 22;
         if ((active0 & 0x224380L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
            return 22;
         }
         return -1;
      case 4:
         if ((active0 & 0x24200L) != 0L)
            return 23;
         if ((active0 & 0x200180L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
            return 23;
         }
         return -1;
      case 5:
         if ((active0 & 0x200180L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 5;
            return 24;
         }
         return -1;
      case 6:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 6;
            return 25;
         }
         if ((active0 & 0x200080L) != 0L)
            return 25;
         return -1;
      case 7:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 7;
            return 26;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_0(0, 3, 78);
      case 10:
         return jjStopAtPos(0, 4);
      case 13:
         return jjStopAtPos(0, 2);
      case 32:
         return jjStartNfaWithStates_0(0, 1, 78);
      case 40:
         return jjStartNfaWithStates_0(0, 37, 78);
      case 41:
         return jjStartNfaWithStates_0(0, 38, 78);
      case 42:
         return jjStartNfaWithStates_0(0, 35, 78);
      case 43:
         return jjStartNfaWithStates_0(0, 33, 78);
      case 44:
         return jjStartNfaWithStates_0(0, 40, 78);
      case 45:
         return jjStartNfaWithStates_0(0, 34, 78);
      case 46:
         return jjStartNfaWithStates_0(0, 42, 78);
      case 58:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 59:
         return jjStartNfaWithStates_0(0, 41, 78);
      case 60:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_0(0x2400000L);
      case 61:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 62:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x200200L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1000008000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x2400L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x100800L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x80000040L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x180L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x24000L);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(1, 23, 78);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 78);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 26, 78);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 32, 78);
         break;
      case 62:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(1, 22, 78);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10200L);
      case 102:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 11, 79);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x5000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x20100400L);
      case 111:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 15, 79);
         return jjMoveStringLiteralDfa2_0(active0, 0x80200040L);
      case 114:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(1, 30, 79);
         return jjMoveStringLiteralDfa2_0(active0, 0x20180L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 100:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 1);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 29, 80);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x24000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x200180L);
      case 114:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 80);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 80);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 80);
         break;
      case 118:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 80);
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 6, 22);
         break;
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 100:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 22);
         break;
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 22);
         break;
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x204000L);
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 22);
         break;
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 23);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0x200100L);
      case 110:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 23);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x200080L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 109:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 7, 25);
         break;
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 25);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 8, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 77;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 26:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(3, 8); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(9, 13); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(14, 17); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(18, 20); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddTwoStates(35, 36); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  break;
               case 77:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(21, 33); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 0:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(34, 45); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(46, 56); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(57, 66); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(67, 75); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(76, 83); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(84, 90); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(3, 8); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(9, 13); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(14, 17); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(18, 20); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddTwoStates(35, 36); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  break;
               case 3:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  if ((0x8000a0ffffffffffL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     { jjAddStates(91, 92); }
                  }
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 79:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(34, 45); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(46, 56); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(57, 66); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(67, 75); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(76, 83); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(84, 90); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(3, 8); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(9, 13); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(14, 17); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(18, 20); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddTwoStates(35, 36); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  break;
               case 22:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(57, 66); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(67, 75); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(76, 83); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(84, 90); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(3, 8); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(9, 13); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(14, 17); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(18, 20); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddTwoStates(35, 36); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  break;
               case 78:
               case 11:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 80:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(46, 56); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(57, 66); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(67, 75); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(76, 83); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(84, 90); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(3, 8); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(9, 13); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(14, 17); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(18, 20); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddTwoStates(35, 36); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  break;
               case 2:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(21, 33); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 25:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(84, 90); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(3, 8); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(9, 13); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(14, 17); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(18, 20); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddTwoStates(35, 36); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  break;
               case 24:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(76, 83); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(84, 90); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(3, 8); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(9, 13); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(14, 17); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(18, 20); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddTwoStates(35, 36); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  break;
               case 23:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(67, 75); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(76, 83); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(84, 90); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(3, 8); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(9, 13); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(14, 17); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(18, 20); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddTwoStates(35, 36); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  break;
               case 27:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(9, 13); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(14, 17); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(18, 20); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddTwoStates(35, 36); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  break;
               case 1:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(46, 56); }
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(57, 66); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(67, 75); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(76, 83); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(84, 90); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(3, 8); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(9, 13); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(14, 17); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(18, 20); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddTwoStates(35, 36); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  break;
               case 4:
                  if (curChar != 47)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 5:
                  if ((0xfffffffbffffdbffL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 7:
                  if ((0x8400002400L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 8:
                  if (curChar != 10)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 9:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 13:
                  if ((0x8400002400L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 15:
                  if (curChar == 10)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 16:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x8000a0ffffffffffL & l) != 0L && kind > 53)
                     kind = 53;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(33); }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAdd(33); }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(21, 33); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L && kind > 43)
                     kind = 43;
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(35); }
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddTwoStates(35, 36); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(18, 20); }
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(14, 17); }
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(9, 13); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(3, 8); }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(84, 90); }
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(76, 83); }
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(67, 75); }
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(57, 66); }
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(46, 56); }
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(34, 45); }
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjAddStates(91, 92); }
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(56); }
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAdd(56); }
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(93, 98); }
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L && kind > 44)
                     kind = 44;
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAdd(58); }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(58, 59); }
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(99, 101); }
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(102, 105); }
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(106, 110); }
                  break;
               case 65:
                  if ((0x2400L & l) != 0L)
                     { jjCheckNAddStates(111, 114); }
                  break;
               case 66:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(111, 114); }
                  break;
               case 68:
                  if ((0x8400002400L & l) != 0L)
                     { jjCheckNAddStates(111, 114); }
                  break;
               case 70:
                  if (curChar == 10)
                     { jjCheckNAddStates(111, 114); }
                  break;
               case 71:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if ((0xfffffffbffffdbffL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddTwoStates(72, 73); }
                  break;
               case 74:
                  if ((0x8400002400L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddTwoStates(72, 73); }
                  break;
               case 75:
                  if (curChar != 10)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddTwoStates(72, 73); }
                  break;
               case 76:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 26:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 92)
                     { jjAddStates(115, 116); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(3, 8); }
                  }
                  else if (curChar == 125)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(9, 13); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(14, 17); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(18, 20); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddTwoStates(35, 36); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  break;
               case 77:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 92)
                     { jjAddStates(115, 116); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(21, 33); }
                  }
                  else if (curChar == 125)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 0:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 92)
                     { jjAddStates(115, 116); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(34, 45); }
                  }
                  else if (curChar == 125)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(46, 56); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(57, 66); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(67, 75); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(76, 83); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(84, 90); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(3, 8); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(9, 13); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(14, 17); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(18, 20); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddTwoStates(35, 36); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 92)
                     { jjAddStates(115, 116); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjAddStates(117, 118); }
                  }
                  else if ((0xf800000178000001L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                  }
                  if (curChar == 123)
                  {
                     if (kind > 51)
                        kind = 51;
                     { jjCheckNAddStates(119, 124); }
                  }
                  else if (curChar == 125)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 79:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 92)
                     { jjAddStates(115, 116); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(34, 45); }
                  }
                  else if (curChar == 125)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(46, 56); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(57, 66); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(67, 75); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(76, 83); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(84, 90); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(3, 8); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(9, 13); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(14, 17); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(18, 20); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddTwoStates(35, 36); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  break;
               case 22:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 92)
                     { jjAddStates(115, 116); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(57, 66); }
                  }
                  else if (curChar == 125)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(67, 75); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(76, 83); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(84, 90); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(3, 8); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(9, 13); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(14, 17); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(18, 20); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddTwoStates(35, 36); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  break;
               case 78:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 92)
                     { jjAddStates(115, 116); }
                  if (curChar == 125)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  break;
               case 80:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 92)
                     { jjAddStates(115, 116); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(46, 56); }
                  }
                  else if (curChar == 125)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(57, 66); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(67, 75); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(76, 83); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(84, 90); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(3, 8); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(9, 13); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(14, 17); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(18, 20); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddTwoStates(35, 36); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  break;
               case 2:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 92)
                     { jjAddStates(115, 116); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(21, 33); }
                  }
                  else if (curChar == 125)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 25:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 92)
                     { jjAddStates(115, 116); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(84, 90); }
                  }
                  else if (curChar == 125)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(3, 8); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(9, 13); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(14, 17); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(18, 20); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddTwoStates(35, 36); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  break;
               case 24:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 92)
                     { jjAddStates(115, 116); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(76, 83); }
                  }
                  else if (curChar == 125)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(84, 90); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(3, 8); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(9, 13); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(14, 17); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(18, 20); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddTwoStates(35, 36); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  break;
               case 23:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 92)
                     { jjAddStates(115, 116); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(67, 75); }
                  }
                  else if (curChar == 125)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(76, 83); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(84, 90); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(3, 8); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(9, 13); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(14, 17); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(18, 20); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddTwoStates(35, 36); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  break;
               case 27:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 92)
                     { jjAddStates(115, 116); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(9, 13); }
                  }
                  else if (curChar == 125)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(14, 17); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(18, 20); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddTwoStates(35, 36); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  break;
               case 1:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 92)
                     { jjAddStates(115, 116); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(46, 56); }
                  }
                  else if (curChar == 125)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(57, 66); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(67, 75); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(76, 83); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(84, 90); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(3, 8); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(9, 13); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(14, 17); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddStates(18, 20); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAddTwoStates(35, 36); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     { jjCheckNAdd(35); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  break;
               case 5:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjAddStates(125, 126); }
                  break;
               case 7:
                  if ((0x14404410000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 12:
                  if (curChar == 92)
                     { jjAddStates(115, 116); }
                  break;
               case 13:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 14:
                  if (curChar == 125 && kind > 52)
                     kind = 52;
                  break;
               case 17:
                  if ((0xf800000178000001L & l) != 0L && kind > 53)
                     kind = 53;
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjAddStates(117, 118); }
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 28:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAdd(33); }
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAdd(33); }
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(21, 33); }
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 43)
                     kind = 43;
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(35); }
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddTwoStates(35, 36); }
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(18, 20); }
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(14, 17); }
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(9, 13); }
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(3, 8); }
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(84, 90); }
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(76, 83); }
                  break;
               case 44:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(67, 75); }
                  break;
               case 45:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(57, 66); }
                  break;
               case 46:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(46, 56); }
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(34, 45); }
                  break;
               case 64:
                  if (curChar != 123)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddStates(119, 124); }
                  break;
               case 66:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(111, 114); }
                  break;
               case 67:
                  if (curChar == 92)
                     { jjAddStates(127, 128); }
                  break;
               case 68:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(111, 114); }
                  break;
               case 69:
                  if (curChar == 125 && kind > 48)
                     kind = 48;
                  break;
               case 72:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddTwoStates(72, 73); }
                  break;
               case 73:
                  if (curChar == 92)
                     { jjAddStates(129, 130); }
                  break;
               case 74:
                  if ((0x14404410000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAddTwoStates(72, 73); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 26:
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 77:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                  }
                  break;
               case 79:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 78:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 80:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 25:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 24:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 23:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 27:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 5:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjAddStates(131, 132); }
                  break;
               case 17:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 53)
                     kind = 53;
                  break;
               case 66:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(111, 114); }
                  break;
               case 72:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjAddStates(133, 134); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 77 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\156\157\166\141", 
"\160\162\157\147\162\141\155", "\160\162\157\143\145\144\165\162\145", "\142\145\147\151\156", 
"\145\156\144", "\151\146", "\164\150\145\156", "\145\154\163\145", "\167\150\151\154\145", 
"\144\157", "\162\145\141\144", "\167\162\151\164\145", "\166\141\162", null, 
"\151\156\164", "\142\157\157\154\145\141\156", "\74\76", "\75\75", "\74", "\74\75", "\76\75", 
"\76", "\75", "\141\156\144", "\157\162", "\156\157\164", "\72\75", "\53", "\55", 
"\52", "\144\151\166", "\50", "\51", "\72", "\54", "\73", "\56", null, null, null, 
null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   11, 12, 14, 35, 36, 37, 38, 39, 40, 35, 36, 37, 38, 39, 35, 36, 
   37, 38, 35, 36, 37, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 
   46, 47, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 35, 36, 
   37, 38, 39, 40, 41, 42, 43, 44, 45, 35, 36, 37, 38, 39, 40, 41, 
   42, 43, 44, 35, 36, 37, 38, 39, 40, 41, 42, 43, 35, 36, 37, 38, 
   39, 40, 41, 42, 35, 36, 37, 38, 39, 40, 41, 49, 57, 58, 59, 60, 
   61, 62, 63, 58, 59, 60, 58, 59, 60, 61, 58, 59, 60, 61, 62, 65, 
   66, 67, 69, 13, 16, 19, 34, 65, 66, 67, 69, 72, 73, 7, 9, 68, 
   71, 74, 76, 5, 6, 72, 73, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
            SkipLexicalActions(matchedToken);
         }
         else
            SkipLexicalActions(null);
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 47 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                            System.out.println("COMENTARIO_UMA_LINHA: "+image);
         break;
      case 48 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                 System.out.println("COMENTARIO_MULT_LINHAS: "+image);
         break;
      case 49 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        countLexError++;
        System.err.println("Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+
        "M\u00e1ximo de caracteres para N\u00daMERO INTEIRO (8) ultrapassado: " + image + " "+ "TOTAL ERRO "+countLexError);
        System.out.println("Erro Lexico --------> "+image);
         break;
      case 50 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        countLexError++;
        System.err.println("Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+
        "M\u00e1ximo de caracteres para IDENTIFICADOR (15) ultrapassado: " + image + " "+ "TOTAL ERRO "+countLexError);
        System.out.println("Erro Lexico --------> "+image);
         break;
      case 51 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        countLexError++;
        System.err.println("Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+
        " Coment\u00e1rio de m\u00faltiplas linhas n\u00e3o foi fechado: " + image + " "+ "TOTAL ERRO "+countLexError);
        System.out.println("Erro Lexico --------> "+image);
         break;
      case 52 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        countLexError++;
        System.err.println("Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+
        " Coment\u00e1rio de m\u00faltiplas linhas n\u00e3o foi aberto: " + image + " "+ "TOTAL ERRO "+countLexError);
        System.out.println("Erro Lexico --------> "+image);
         break;
      case 53 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        countLexError++;
        System.err.println("Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+
        " S\u00edmbolo inv\u00e1lido foi encontrado: " + image + " "+ "TOTAL ERRO "+countLexError);
        System.out.println("Erro Lexico --------> "+image);
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 6 :
        image.append(jjstrLiteralImages[6]);
        lengthOfMatch = jjstrLiteralImages[6].length();
                     System.out.println("Palavra Reservada: "+image);
         break;
      case 7 :
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
                                 System.out.println("Palavra Reservada: "+image);
         break;
      case 8 :
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
                                       System.out.println("Palavra Reservada: "+image);
         break;
      case 9 :
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
                            System.out.println("Palavra Reservada: "+image);
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
                        System.out.println("Palavra Reservada: "+image);
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
                      System.out.println("Palavra Reservada: "+image);
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
                          System.out.println("Palavra Reservada: "+image);
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
                          System.out.println("Palavra Reservada: "+image);
         break;
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
                            System.out.println("Palavra Reservada: "+image);
         break;
      case 15 :
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
                      System.out.println("Palavra Reservada: "+image);
         break;
      case 16 :
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
                          System.out.println("Palavra Reservada: "+image);
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
                            System.out.println("Palavra Reservada: "+image);
         break;
      case 18 :
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
                        System.out.println("Palavra Reservada: "+image);
         break;
      case 19 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                               System.out.println("Palavra Reservada: "+image);
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
                        System.out.println("Palavra Reservada: "+image);
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
                                 System.out.println("Palavra Reservada: "+image);
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
                                        System.out.println("Palavra Reservada: "+image);
         break;
      case 23 :
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
                                           System.out.println("Palavra Reservada: "+image);
         break;
      case 24 :
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
                                    System.out.println("Palavra Reservada: "+image);
         break;
      case 25 :
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
                                           System.out.println("Palavra Reservada: "+image);
         break;
      case 26 :
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
                                           System.out.println("Palavra Reservada: "+image);
         break;
      case 27 :
        image.append(jjstrLiteralImages[27]);
        lengthOfMatch = jjstrLiteralImages[27].length();
                                    System.out.println("Palavra Reservada: "+image);
         break;
      case 28 :
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
                                        System.out.println("Palavra Reservada: "+image);
         break;
      case 29 :
        image.append(jjstrLiteralImages[29]);
        lengthOfMatch = jjstrLiteralImages[29].length();
                                    System.out.println("Palavra Reservada: "+image);
         break;
      case 30 :
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
                                  System.out.println("Palavra Reservada: "+image);
         break;
      case 31 :
        image.append(jjstrLiteralImages[31]);
        lengthOfMatch = jjstrLiteralImages[31].length();
                                    System.out.println("Palavra Reservada: "+image);
         break;
      case 32 :
        image.append(jjstrLiteralImages[32]);
        lengthOfMatch = jjstrLiteralImages[32].length();
                                              System.out.println("Palavra Reservada: "+image);
         break;
      case 33 :
        image.append(jjstrLiteralImages[33]);
        lengthOfMatch = jjstrLiteralImages[33].length();
                                         System.out.println("Palavra Reservada: "+image);
         break;
      case 34 :
        image.append(jjstrLiteralImages[34]);
        lengthOfMatch = jjstrLiteralImages[34].length();
                                            System.out.println("Palavra Reservada: "+image);
         break;
      case 35 :
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
                                                System.out.println("Palavra Reservada: "+image);
         break;
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
                                            System.out.println("Palavra Reservada: "+image);
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
                             System.out.println("Palavra Reservada: "+image);
         break;
      case 38 :
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
                             System.out.println("Palavra Reservada: "+image);
         break;
      case 39 :
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
                                  System.out.println("Palavra Reservada: "+image);
         break;
      case 40 :
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
                               System.out.println("Palavra Reservada: "+image);
         break;
      case 41 :
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
                                      System.out.println("Palavra Reservada: "+image);
         break;
      case 42 :
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
                            System.out.println("Palavra Reservada: "+image);
         break;
      case 43 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                        System.out.println("IDENTIFICADOR: "+image);
         break;
      case 44 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                         System.out.println("NUMERO_INTEIRO: "+image);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public SemanticAnalizerTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public SemanticAnalizerTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 77; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x1fffffffffc1L, 
};
static final long[] jjtoSkip = {
   0x3f80000000001eL, 
};
static final long[] jjtoSpecial = {
   0x3f800000000000L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[77];
    private final int[] jjstateSet = new int[2 * 77];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
