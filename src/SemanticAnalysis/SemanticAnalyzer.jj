options{
STATIC = false;
DEBUG_LOOKAHEAD = false;
}
PARSER_BEGIN(SemanticAnalizer)
package SemanticAnalysis;
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;
import Utils.SemanticTableObject;
import Utils.SemanticTable;
import Utils.GenerateCode;
import Utils.PolishNotation;

public class SemanticAnalizer{

boolean Menosshort = false; //Saida resumida falso
ArrayList<String> listaErrosSintax = new ArrayList<>();
ArrayList<String> listaErrosSemantica = new ArrayList<>();
ArrayList<String> listaDeclaracoes = new ArrayList<>();
ArrayList<ArrayList<String>> listaLexemasSemantico = new ArrayList<>();
SemanticTable table  = new SemanticTable();
String tipo =  "";
GenerateCode gerador = new GenerateCode();

public ArrayList <String> getListaErrosSintax(){
    return listaErrosSintax;
}

/*public cadeProgram() {
    Token t = new Token ();
    do {

    t = getNextToken(); //Obtém o próximo token
    String nomeToken = tokenImage[t.kind]; //guarda o nome do token na string

    } while(t.kind!=0); //condicao de parada: final do arquivo (constante eof 0 )
}

public void processa() throws Exception{
    Token t = new Token ();

    do {

    t = getNextToken(); //Obtém o próximo token
    String nomeToken = tokenImage[t.kind]; //guarda o nome do token na string

    } while(t.kind!=0); //condicao de parada: final do arquivo (constante eof 0 )
}

public void processaSintax(Scanner_1 parser) throws ParseException {
    System.out.println("comeco");
    //parser.principal();
    //cadeProgram();
    System.out.println("cabo");
}*/

public static void main(String args[], String x) throws ParseException, FileNotFoundException {

try {
    

}catch (Error e){
System.out.println(e.getMessage()); //Mensagem de erro léxico (em ingles) mostrando linha e coluna
}

}
}

PARSER_END(SemanticAnalizer)

TOKEN_MGR_DECLS :{
    int countLexError = 0;
    public int foundLexError () {
        return countLexError;
    }
}

SKIP : // TOKENS IGNORADOS
{
 " "
| "\r" 
| "\t" 
| "\n"
//| <COMENTARIO: "//" (<COM>)*>
//| <COMENTARIOS: "{" ("\n" | "\r" | <COM>)* "}" >
| <#COM: ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ( ["\n","\r"] | "\r\n")))*>

}

TOKEN : //PALAVRAS RESERVADAS
{
 
    <NOVA: "nova"> { System.out.println("Palavra Reservada: "+image); }

    |<RSV_PROGRAMA: "program"> { System.out.println("Palavra Reservada: "+image); }
    |<RSV_PROCEDIMENTO: "procedure"> { System.out.println("Palavra Reservada: "+image); }
    |<RSV_BEGIN: "begin"> { System.out.println("Palavra Reservada: "+image); }
    |<RSV_END: "end"> { System.out.println("Palavra Reservada: "+image); }
    |<RSV_IF: "if"> { System.out.println("Palavra Reservada: "+image); }
    |<RSV_THEN: "then"> { System.out.println("Palavra Reservada: "+image); }
    |<RSV_ELSE: "else"> { System.out.println("Palavra Reservada: "+image); }
    |<RSV_WHILE: "while"> { System.out.println("Palavra Reservada: "+image); }
    |<RSV_DO: "do"> { System.out.println("Palavra Reservada: "+image); }
    |<RSV_READ: "read"> { System.out.println("Palavra Reservada: "+image); }
    |<RSV_WRITE: "write"> { System.out.println("Palavra Reservada: "+image); }
    |<RSV_VAR: "var"> { System.out.println("Palavra Reservada: "+image); }
    |<RSV_FIM: <RSV_END>"."> { System.out.println("Palavra Reservada: "+image); }
    //|<RSV_TRUE: "true"> { System.out.println("Palavra Reservada: "+image); }
    //|<RSV_FALSE: "false"> { System.out.println("Palavra Reservada: "+image); }
}

TOKEN : //TIPOS
{
    //<TIPO: (<TIPO_INT>|<TIPO_BOOLEAN>)> { System.out.println("Palavra Reservada: "+image); }
    <TIPO_INT: "int"> { System.out.println("Palavra Reservada: "+image); }
    |<TIPO_BOOLEAN: "boolean"> { System.out.println("Palavra Reservada: "+image); }
}

TOKEN : //OPERADORES E SÍMBOLOS
{
    
    <OPERADOR_LOGICO_DIFERENCA: "<>"> { System.out.println("Palavra Reservada: "+image); }
    |<OPERADOR_LOGICO_IGUAL_IGUAL: "=="> { System.out.println("Palavra Reservada: "+image); }
    |<OPERADOR_LOGICO_MENOR: "<"> { System.out.println("Palavra Reservada: "+image); }
    |<OPERADOR_LOGICO_MENOR_IGUAL: "<="> { System.out.println("Palavra Reservada: "+image); }
    |<OPERADOR_LOGICO_MAIOR_IGUAL: ">="> { System.out.println("Palavra Reservada: "+image); }
    |<OPERADOR_LOGICO_MAIOR: ">"> { System.out.println("Palavra Reservada: "+image); }
    |<OPERADOR_LOGICO_IGUALDADE: "="> { System.out.println("Palavra Reservada: "+image); }
    |<OPERADOR_LOGICO_AND: "and"> { System.out.println("Palavra Reservada: "+image); }
    |<OPERADOR_LOGICO_OR: "or"> { System.out.println("Palavra Reservada: "+image); }
    |<OPERADOR_LOGICO_NOT: "not"> { System.out.println("Palavra Reservada: "+image); }
    |<OPERADOR_ARITMETICO_ATRIBUICAO: ":="> { System.out.println("Palavra Reservada: "+image); }
    |<OPERADOR_ARITMETICO_ADICAO: "+"> { System.out.println("Palavra Reservada: "+image); }
    |<OPERADOR_ARITMETICO_SUBTRACAO: "-"> { System.out.println("Palavra Reservada: "+image); }
    |<OPERADOR_ARITMETICO_MULTIPLICACAO: "*"> { System.out.println("Palavra Reservada: "+image); }
    |<OPERADOR_ARITMETICO_DIVISAO: "div"> { System.out.println("Palavra Reservada: "+image); }
    |<PARENTESES_ESQ: "("> { System.out.println("Palavra Reservada: "+image); }
    |<PARENTESES_DIR: ")"> { System.out.println("Palavra Reservada: "+image); }
    |<SIMBOLO_DOIS_PONTOS: ":"> { System.out.println("Palavra Reservada: "+image); }
    |<SIMBOLO_VIRGULA:  ","> { System.out.println("Palavra Reservada: "+image); }
    |<SIMBOLO_PONTO_E_VIRGULA: ";"> { System.out.println("Palavra Reservada: "+image); }
    |<SIMBOLO_PONTO: "."> { System.out.println("Palavra Reservada: "+image); }

}

TOKEN : //NÚMEROS E IDENTIFICADORES
{

    <IDENTIFICADOR: <LETRA> (<LETRA>|<DIGITO>){0,14}> { System.out.println("IDENTIFICADOR: "+image); }
    //|<IDENTIFICADOR_CHAMADA_PROCEDIMENTO: <IDENTIFICADOR>> { System.out.println("IDENTIFICADOR_CHAMADA_PROCEDIMENTO: "+image); }
    |<NUMERO_INTEIRO: (<DIGITO>){1,8}> { System.out.println("NUMERO_INTEIRO: "+image); }
    |<#LETRA: ["_", "a"-"z", "A"-"Z"] >
    |<#DIGITO: ["0" - "9"] >

}

/*TOKEN : //COMENTÁRIOS
{

}*/

SPECIAL_TOKEN : {

    <COMENTARIO_UMA_LINHA: "//" (<COM>)*> { System.out.println("COMENTARIO_UMA_LINHA: "+image); }
    |<COMENTARIO_MULT_LINHAS: "{" ("\n" | "\r" | <COM>)* "}" > { System.out.println("COMENTARIO_MULT_LINHAS: "+image); }

    |<ERRO_OVERFLOW_INT: (<DIGITO>){9,} > {
        countLexError++;
        System.err.println("Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+
        "Máximo de caracteres para NÚMERO INTEIRO (8) ultrapassado: " + image + " "+ "TOTAL ERRO "+countLexError);
        System.out.println("Erro Lexico --------> "+image);
    }

    |<ERRO_OVERFLOW_IDENTIFICADOR: <LETRA> (<LETRA>|<DIGITO>){15,} > {
        countLexError++;
        System.err.println("Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+
        "Máximo de caracteres para IDENTIFICADOR (15) ultrapassado: " + image + " "+ "TOTAL ERRO "+countLexError);
        System.out.println("Erro Lexico --------> "+image);
    }

    |<ERRO_COMENTARIO_MULT_LINHAS_SEM_FECHAR: "{"(<COM>)*> {
        countLexError++;
        System.err.println("Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+
        " Comentário de múltiplas linhas não foi fechado: " + image + " "+ "TOTAL ERRO "+countLexError);
        System.out.println("Erro Lexico --------> "+image);
    }

    |<ERRO_COMENTARIO_MULT_LINHAS_SEM_ABRIR: (<COM>)*"}"> { 
        countLexError++;
        System.err.println("Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+
        " Comentário de múltiplas linhas não foi aberto: " + image + " "+ "TOTAL ERRO "+countLexError);
        System.out.println("Erro Lexico --------> "+image);
    }

    |<ERRO_SIMBOLO_INVALIDO: ~["_", "a"-"z", "A"-"Z", "0" - "9", ".", ";", ",", ")", "(", "*", "+", ":", "=", ">", "<"]> {
        countLexError++;
        System.err.println("Linha "+ input_stream.getEndLine()+" Coluna "+ input_stream.getEndColumn()+
        " Símbolo inválido foi encontrado: " + image + " "+ "TOTAL ERRO "+countLexError);
        System.out.println("Erro Lexico --------> "+image);
    }

}

JAVACODE
    void error_skipto(ParseException e, ArrayList<Integer> sincronizadores) {
      String erro = e.toString();
      //System.out.println(erro);  // print the error message
      armazenamentoErros(erro);
      Token t;
      // consume tokens all the way up to a token of "kind" - use a do-while loop
      // rather than a while because the current token is the one immediately before
      // the erroneous token (in our case the token immediately before what should
      // have been "if"/"while".
      do {
        t = getNextToken();
        System.out.println(t.kind);
      }
      while (!sincronizadores.contains(t.kind));
    }

JAVACODE
    void armazenamentoErros(String erro) {
        //String erro = e.toString();
        String parametroErro = "Was expecting";
        String[] split = erro.split(parametroErro);
        String comecoErro = split[0];
        for(String str : listaErrosSintax) {
            String[] parte = str.split(parametroErro);
            String comecoErro1 = parte[0];
            if(comecoErro1.equals(comecoErro))
                return;
        }
        listaErrosSintax.add(erro); // save the error message
    }

JAVACODE
    void teste(int kind) {
      ParseException e = generateParseException();  // generate the exception object
      String erro = e.toString();
      //System.out.println(erro);  // print the error message
      armazenamentoErros(erro);
      Token t;
      // consume tokens all the way up to a token of "kind" - use a do-while loop
      // rather than a while because the current token is the one immediately before
      // the erroneous token (in our case the token immediately before what should
      // have been "if"/"while".
      do {
        t = getNextToken();
      }
      while (t.kind != kind);
    }

JAVACODE
    void esvaziarArrayList(ArrayList<String> lista) {
        lista.removeAll(lista);
    }

JAVACODE
    void esvaziarArraysLists(ArrayList<ArrayList<String>> lista) {
        lista.removeAll(lista);
    }

JAVACODE 
    boolean verificaFimExpressao(String token) {
        if(!token.equals("SIMBOLO_PONTO_E_VIRGULA") && !token.equals("RSV_END") && !token.equals("RSV_FIM"))
            return true;
        return false;
    }

JAVACODE
    void declaracoesParaSemantica() {
        gerador.gerar("","INPP",""); //começo de tudo
        String tipo = listaDeclaracoes.get(0);
        String valor = "0";
        int s = 0;

        listaDeclaracoes.remove(0);
        for(String identificador : listaDeclaracoes){
            if(identificador.equals("int") || identificador.equals("boolean")){
                tipo = identificador;
                continue;
            }
            table.insertTableRow(new SemanticTableObject(identificador, "IDENTIFICADOR", "var", tipo, valor, false, s));
            gerador.gerar("","AMEM","1"); // inicio da tristeza
            s++;
        }
        esvaziarArrayList(listaDeclaracoes);
    }

JAVACODE
    void readParaSemantica(ArrayList<ArrayList<String>> auxListaLexemasSemantico) {
        auxListaLexemasSemantico.remove(0); // Remove READ
        ArrayList<String> linha = auxListaLexemasSemantico.get(0);
        auxListaLexemasSemantico.remove(0); // Remove PARENTESES_ESQ
        linha = auxListaLexemasSemantico.get(0);
        while(verificaFimExpressao(linha.get(1))){
            gerador.gerar("","LEIT","");
            gerador.gerar("","ARMZ",Integer.toString(table.searchRowByLexemaTokenAndReturnAddress(linha.get(0),linha.get(1))));
            auxListaLexemasSemantico.remove(0);
            linha = auxListaLexemasSemantico.get(0);
            auxListaLexemasSemantico.remove(0); // Removendo vírgula ou parenteses_esq
            linha = auxListaLexemasSemantico.get(0);
        }
        preparaParaProximaExpressao(auxListaLexemasSemantico);
    }

JAVACODE
    void writeParaSemantica(ArrayList<ArrayList<String>> auxListaLexemasSemantico) {
        auxListaLexemasSemantico.remove(0); // Remove WRITE
        ArrayList<String> linhaAtual = auxListaLexemasSemantico.get(0);
        auxListaLexemasSemantico.remove(0); // Remove PARENTESES_ESQ
        linhaAtual = auxListaLexemasSemantico.get(0);
        ArrayList<String> linhaSeguinte = auxListaLexemasSemantico.get(1);
        ArrayList<ArrayList<String>> expressao = new ArrayList<>();
        String valor = "";
        while(verificaFimExpressao(linhaAtual.get(1))){
            while((!linhaAtual.get(1).equals("SIMBOLO_VIRGULA")) &&
                 !( linhaAtual.get(1).equals("PARENTESES_DIR") && (linhaSeguinte.get(1).equals("SIMBOLO_PONTO_E_VIRGULA")
                 || linhaSeguinte.get(1).equals("RSV_END")
                 || linhaSeguinte.get(1).equals("RSV_FIM")))){
                converteTrueEFalse(linhaAtual);
                expressao.add(linhaAtual);
                auxListaLexemasSemantico.remove(0);
                linhaAtual = linhaSeguinte;
                linhaSeguinte = auxListaLexemasSemantico.get(1);
            }
            auxListaLexemasSemantico.remove(0);
            linhaAtual = linhaSeguinte;
            if(auxListaLexemasSemantico.size() > 1)
                linhaSeguinte = auxListaLexemasSemantico.get(1);
            valor = valorExpressaoAtribuicao(expressao);
            esvaziarArraysLists(expressao);
        }
        preparaParaProximaExpressao(auxListaLexemasSemantico);
    }

JAVACODE
    String valorExpressaoAtribuicao(ArrayList<ArrayList<String>> expressao){
        // Aqui é onde a notação polonesa deve ser usada para retornar o novo valor do identificador em String
        // O parâmetro dado é uma lista de todos os tokens e lexemas pertencentes apenas a expressão em questão
        // Por exemplo: ( ("a","IDENTIFICADOR") ("+","OPERADOR_ARITMETICO_ADICAO") ("b","IDENTIFICADOR") )
        // Existe um método para encontrar o valor correspondente de cada identificador a partir de seu lexema e token
        // Ele está na classe SemanticTable.java e se chama "searchRowByLexemaTokenAndReturnValue()"
        // Considere que a expressao dada não possui erros sintáticos ou semânticos
        // o return abaixo é só pro método funcionar e eu poder testar
        // Não se esqueçam que se der real tem q arredondar pra inteiro por favor
        
        
        String exp = "";

        for(ArrayList<String> s : expressao){
            exp = exp.concat(s.get(0));
        }

        System.out.println("Expressão: " + exp);
        //PolishNotation.convertToReversePolish();
        //gerador.gerar("","ARMZ",Integer.toString(table.searchRowByLexemaTokenAndReturnAddress(linha.get(0),linha.get(1))));
        return "1";
    }

JAVACODE
    void preparaParaProximaExpressao(ArrayList<ArrayList<String>> auxListaLexemasSemantico){
        auxListaLexemasSemantico.remove(0);
        if(!auxListaLexemasSemantico.isEmpty()){
            ArrayList<String> linha = auxListaLexemasSemantico.get(0);
            if((linha.get(1)).equals("SIMBOLO_PONTO_E_VIRGULA")){
                auxListaLexemasSemantico.remove(0);
                comandoParaSemantica(auxListaLexemasSemantico);
            }else if((linha.get(1)).equals("RSV_FIM"))
                auxListaLexemasSemantico.remove(0);
            else comandoParaSemantica(auxListaLexemasSemantico);
        }
    }

JAVACODE 
    void converteTrueEFalse(ArrayList<String> linha){
        if(linha.get(1) == "IDENTIFICADOR")
            if(linha.get(0) == "false"){
                linha.set(0, "0");
                linha.set(1, "RSV_FALSE");
            }else if(linha.get(0) == "true"){
                linha.set(0, "1");
                linha.set(1, "RSV_TRUE");
            }
    }        

JAVACODE
    void atribuicaoParaSemantica(ArrayList<ArrayList<String>> auxListaLexemasSemantico) {
        ArrayList<String> identificadorEsq = auxListaLexemasSemantico.get(0);
        auxListaLexemasSemantico.remove(0);
        ArrayList<String> linha = auxListaLexemasSemantico.get(0);
        ArrayList<ArrayList<String>> expressao = new ArrayList<>();
        while(verificaFimExpressao(linha.get(1))){
            converteTrueEFalse(linha);
            expressao.add(linha);
            auxListaLexemasSemantico.remove(0);
            linha = auxListaLexemasSemantico.get(0);
        }
        String valor = valorExpressaoAtribuicao(expressao);
        table.updateRowByLexemaAndToken(identificadorEsq.get(0), identificadorEsq.get(1), valor);
        preparaParaProximaExpressao(auxListaLexemasSemantico);
    }

JAVACODE
    Boolean verificaTokenDiferenteRelacoes(String token){
        switch(token){
            case "OPERADOR_LOGICO_DIFERENCA":
            case "OPERADOR_LOGICO_IGUAL_IGUAL":
            case "OPERADOR_LOGICO_MENOR":
            case "OPERADOR_LOGICO_MENOR_IGUAL":
            case "OPERADOR_LOGICO_MAIOR_IGUAL":
            case "OPERADOR_LOGICO_MAIOR":
                return false;
            default: return true;
        }
    }

JAVACODE
    Boolean verificaRelacaoVddOUFalsa(String Esq, String Dir, String relacao){
        int valorEsq = Integer.parseInt(Esq);
        int valorDir = Integer.parseInt(Dir);
        Boolean flag = false;
        switch(relacao){
            case "OPERADOR_LOGICO_DIFERENCA":
                if(valorEsq != valorDir)
                    flag = true; 
                break;
            case "OPERADOR_LOGICO_IGUAL_IGUAL":
                if(valorEsq == valorDir)
                    flag = true; 
                break;
            case "OPERADOR_LOGICO_MENOR":
                if(valorEsq < valorDir)
                    flag = true; 
                break;
            case "OPERADOR_LOGICO_MENOR_IGUAL":
                if(valorEsq <= valorDir)
                    flag = true; 
                break;
            case "OPERADOR_LOGICO_MAIOR_IGUAL":
                if(valorEsq >= valorDir)
                    flag = true; 
                break;
            case "OPERADOR_LOGICO_MAIOR":
                if(valorEsq > valorDir)
                    flag = true; 
                break;
        }
        return flag;
    }

JAVACODE
    void condicionalParaSemantica(ArrayList<ArrayList<String>> auxListaLexemasSemantico) {
        auxListaLexemasSemantico.remove(0);
        auxListaLexemasSemantico.remove(0);
        ArrayList<String> linhaAtual = auxListaLexemasSemantico.get(0);
        ArrayList<String> linhaSeguinte = auxListaLexemasSemantico.get(1);
        ArrayList<ArrayList<String>> expressao = new ArrayList<>();
        Boolean flag = false;
        if(linhaAtual.get(1).equals("IDENTIFICADOR") && linhaSeguinte.get(1).equals("PARENTESES_DIR")){
            converteTrueEFalse(linhaAtual);
            String valor = "";
            if(linhaAtual.get(1).equals("IDENTIFICADOR"))
                valor = table.searchRowByLexemaTokenAndReturnValue(linhaAtual.get(0), linhaAtual.get(1));
            else if(linhaAtual.get(1).equals("RSV_FALSE"))
                valor = "0";
            else if(linhaAtual.get(1).equals("RSV_TRUE"))
                valor = "1";
            auxListaLexemasSemantico.remove(0);
            if(valor.equals("1"))
                flag = true;
        }else {
            while(verificaTokenDiferenteRelacoes(linhaAtual.get(1))){
                converteTrueEFalse(linhaAtual);
                expressao.add(linhaAtual);
                auxListaLexemasSemantico.remove(0);
                linhaAtual = auxListaLexemasSemantico.get(0);
            }
            String valorEsq = valorExpressaoAtribuicao(expressao);
            esvaziarArraysLists(expressao);
            String relacao = linhaAtual.get(1);
            auxListaLexemasSemantico.remove(0);
            linhaAtual = auxListaLexemasSemantico.get(0);
            linhaSeguinte = auxListaLexemasSemantico.get(1);
            while(!(linhaAtual.get(1)).equals("PARENTESES_DIR") && !(linhaSeguinte.get(1)).equals("RSV_THEN")){
                converteTrueEFalse(linhaAtual);
                expressao.add(linhaAtual);
                auxListaLexemasSemantico.remove(0);
                linhaAtual = linhaSeguinte;
                linhaSeguinte = auxListaLexemasSemantico.get(1);
            }
            String valorDir = valorExpressaoAtribuicao(expressao);
            flag = verificaRelacaoVddOUFalsa(valorEsq, valorDir, relacao);
        }
        auxListaLexemasSemantico.remove(0);
        auxListaLexemasSemantico.remove(0);
        linhaAtual = auxListaLexemasSemantico.get(0);
        // Verificando se tem else
        ArrayList<String> tokenElse = new ArrayList<>();
        int quantCifrao = 1;
        for(ArrayList<String> linha : auxListaLexemasSemantico){
            if(linha.get(1).equals("RSV_IF") || linha.get(1).equals("RSV_ELSE") || linha.get(1).equals("RSV_WHILE"))
                quantCifrao++;
            else if(linha.get(1).equals("$"))
                quantCifrao--;
            if(quantCifrao < 1){
                quantCifrao = auxListaLexemasSemantico.indexOf(linha);
                break;
            }
        }
        tokenElse = auxListaLexemasSemantico.get(quantCifrao+1);
        System.out.println("AAAAAAAAAAAAAAAA"+tokenElse);
        if(!tokenElse.get(1).equals("RSV_ELSE"))
            tokenElse = new ArrayList<>();
        if(flag){
            if(tokenElse.isEmpty()){
                quantCifrao = 1;
                for(ArrayList<String> linha : auxListaLexemasSemantico){
                    if(linha.get(1).equals("RSV_IF") || linha.get(1).equals("RSV_ELSE") || linha.get(1).equals("RSV_WHILE"))
                        quantCifrao++;
                    else if(linha.get(1).equals("$"))
                        quantCifrao--;
                    if(quantCifrao < 1){
                        quantCifrao = auxListaLexemasSemantico.indexOf(linha);
                        break;
                    }
                }
                auxListaLexemasSemantico.remove(quantCifrao);
                if(linhaAtual.get(1) == "RSV_BEGIN")
                    auxListaLexemasSemantico.remove(0);
                comandoParaSemantica(auxListaLexemasSemantico);
            }else {
                if(linhaAtual.get(1) == "RSV_BEGIN")
                    auxListaLexemasSemantico.remove(0);
                int i = auxListaLexemasSemantico.indexOf(tokenElse);
                System.out.println(auxListaLexemasSemantico.get(i-1));
                // Removendo Cifrão
                auxListaLexemasSemantico.remove(i-1);
                i--;
                System.out.println(auxListaLexemasSemantico.get(i));
                auxListaLexemasSemantico.remove(i);
                // Removendo caminho else
                quantCifrao = 1;
                System.out.println(auxListaLexemasSemantico.get(i));
                while(quantCifrao > 0){
                    if(auxListaLexemasSemantico.get(i).get(1).equals("RSV_IF") || auxListaLexemasSemantico.get(i).get(1).equals("RSV_ELSE") || auxListaLexemasSemantico.get(i).get(1).equals("RSV_WHILE"))
                        quantCifrao++;
                    else if(auxListaLexemasSemantico.get(i).get(1).equals("$"))
                        quantCifrao--;
                    auxListaLexemasSemantico.remove(i);
                }
                comandoParaSemantica(auxListaLexemasSemantico);
            }
        }else{
            if(tokenElse.isEmpty()){
                System.out.println("EU TO AQUI AAAAAAAAAAAAAAAAAAAAAAA");
                quantCifrao = 1;
                while(quantCifrao > 0){
                    if(linhaAtual.get(1).equals("RSV_IF") || linhaAtual.get(1).equals("RSV_ELSE") || linhaAtual.get(1).equals("RSV_WHILE"))
                        quantCifrao++;
                    else if(linhaAtual.get(1).equals("$"))
                        quantCifrao--;
                    auxListaLexemasSemantico.remove(0);
                    linhaAtual = auxListaLexemasSemantico.get(0);
                }
                if(linhaAtual.get(1) == "SIMBOLO_PONTO_E_VIRGULA")
                    auxListaLexemasSemantico.remove(0);
                comandoParaSemantica(auxListaLexemasSemantico);
            }else {
                while(linhaAtual != tokenElse){
                    auxListaLexemasSemantico.remove(0);
                    linhaAtual = auxListaLexemasSemantico.get(0);
                }
                auxListaLexemasSemantico.remove(0);
                linhaAtual = auxListaLexemasSemantico.get(0);
                quantCifrao = 1;
                for(ArrayList<String> linha : auxListaLexemasSemantico){
                    if(linha.get(1).equals("RSV_IF") || linha.get(1).equals("RSV_ELSE") || linha.get(1).equals("RSV_WHILE"))
                        quantCifrao++;
                    else if(linha.get(1).equals("$"))
                        quantCifrao--;
                    if(quantCifrao < 1){
                        auxListaLexemasSemantico.remove(auxListaLexemasSemantico.indexOf(linha));
                        break;
                    }
                }
                if(linhaAtual.get(1) == "RSV_BEGIN")
                    auxListaLexemasSemantico.remove(0);
                comandoParaSemantica(auxListaLexemasSemantico);
            }
        }
    }

JAVACODE
    void repeticaoParaSemantica(ArrayList<ArrayList<String>> auxListaLexemasSemantico) {
        auxListaLexemasSemantico.remove(0);
        auxListaLexemasSemantico.remove(0);
        ArrayList<String> linhaAtual = auxListaLexemasSemantico.get(0);
        ArrayList<String> linhaSeguinte = auxListaLexemasSemantico.get(1);
        ArrayList<ArrayList<String>> expressao = new ArrayList<>();
        Boolean flag = false;
        String relacao = "";
        if(linhaAtual.get(1).equals("IDENTIFICADOR") && linhaSeguinte.get(1).equals("PARENTESES_DIR")){
            converteTrueEFalse(linhaAtual);
            String valor = "";
            if(linhaAtual.get(1).equals("IDENTIFICADOR"))
                valor = table.searchRowByLexemaTokenAndReturnValue(linhaAtual.get(0), linhaAtual.get(1));
            else if(linhaAtual.get(1).equals("RSV_FALSE"))
                valor = "0";
            else if(linhaAtual.get(1).equals("RSV_TRUE"))
                valor = "1";
            auxListaLexemasSemantico.remove(0);
            if(valor.equals("1"))
                flag = true;
        }else {
            while(verificaTokenDiferenteRelacoes(linhaAtual.get(1))){
                converteTrueEFalse(linhaAtual);
                expressao.add(linhaAtual);
                auxListaLexemasSemantico.remove(0);
                linhaAtual = auxListaLexemasSemantico.get(0);
            }
            String valorEsq = valorExpressaoAtribuicao(expressao);
            esvaziarArraysLists(expressao);
            relacao = linhaAtual.get(1);
            auxListaLexemasSemantico.remove(0);
            linhaAtual = auxListaLexemasSemantico.get(0);
            linhaSeguinte = auxListaLexemasSemantico.get(1);
            while(!(linhaAtual.get(1)).equals("PARENTESES_DIR") && !(linhaSeguinte.get(1)).equals("RSV_DO")){
                converteTrueEFalse(linhaAtual);
                expressao.add(linhaAtual);
                auxListaLexemasSemantico.remove(0);
                linhaAtual = linhaSeguinte;
                linhaSeguinte = auxListaLexemasSemantico.get(1);
            }
            String valorDir = valorExpressaoAtribuicao(expressao);
            flag = verificaRelacaoVddOUFalsa(valorEsq, valorDir, relacao);
        }
        auxListaLexemasSemantico.remove(0);
        auxListaLexemasSemantico.remove(0);
        linhaAtual = auxListaLexemasSemantico.get(0);
        if(linhaAtual.get(1) == "RSV_BEGIN")
            auxListaLexemasSemantico.remove(0);
        linhaAtual = auxListaLexemasSemantico.get(0);
        ArrayList<ArrayList<String>> auxListaLexemasSemanticoWhile = new ArrayList<>();
        int quantCifrao = 1;
        System.out.println(linhaAtual);
        while(quantCifrao > 0){
            if(linhaAtual.get(1).equals("RSV_IF") || linhaAtual.get(1).equals("RSV_ELSE") || linhaAtual.get(1).equals("RSV_WHILE"))
                quantCifrao++;
            else if(linhaAtual.get(1).equals("$"))
                quantCifrao--;
            auxListaLexemasSemanticoWhile.add(linhaAtual);
            auxListaLexemasSemantico.remove(0);
            linhaAtual = auxListaLexemasSemantico.get(0);
        }
        if(linhaAtual.get(1) == "SIMBOLO_PONTO_E_VIRGULA")
            auxListaLexemasSemantico.remove(0);
        // Removendo o cifrão
        auxListaLexemasSemanticoWhile.remove(auxListaLexemasSemanticoWhile.size() - 1);
        String valorEsq, valorDir;
        while(flag){
            comandoParaSemantica(auxListaLexemasSemanticoWhile);
            valorEsq = valorExpressaoAtribuicao(expressao);
            valorDir = valorExpressaoAtribuicao(expressao);
            flag = verificaRelacaoVddOUFalsa(valorEsq, valorDir, relacao);
        }
        comandoParaSemantica(auxListaLexemasSemantico);
    }

JAVACODE
    void comandoParaSemantica(ArrayList<ArrayList<String>> auxListaLexemasSemantico) {
        ArrayList<String> primeiroToken = auxListaLexemasSemantico.get(0);
        // WHILE DE EMERGÊNCIA ligar apenas se o semântico n funcionar
        /*while(primeiroToken.get(1).equals("RSV_END") ||
              primeiroToken.get(1).equals("SIMBOLO_PONTO_E_VIRGULA") ||
              primeiroToken.get(1).equals("$")){
              auxListaLexemasSemantico.remove(0);
              primeiroToken = auxListaLexemasSemantico.get(0);
        }*/
        switch(primeiroToken.get(1)){
            case "IDENTIFICADOR":
                atribuicaoParaSemantica(auxListaLexemasSemantico); break;
            case "RSV_READ":
                readParaSemantica(auxListaLexemasSemantico); break;
            case "RSV_WRITE":
                writeParaSemantica(auxListaLexemasSemantico); break;
            case "RSV_IF":
                condicionalParaSemantica(auxListaLexemasSemantico); break;
            case "RSV_WHILE":
                repeticaoParaSemantica(auxListaLexemasSemantico); break;
            default: break;
        }
    }

void principal(): {Token t = new Token();}
{
    try {
        programa() { for(SemanticTableObject linha : table.getTable()) System.out.println(linha.getLexema()); 
        for(ArrayList<String> lista : listaLexemasSemantico){
            System.out.println(lista.get(0));
        }}
        <EOF>
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF)));
    }
}

void programa(): {Token t = new Token();}
{
    try {
        <RSV_PROGRAMA> { t = getToken(0); System.out.println("RSV_PROGRAMA Sintax: "+t.image); }
        <IDENTIFICADOR> { 
        t = getToken(0); System.out.println("IDENTIFICADOR Sintax: "+t.image); 
        table.insertTableRow(new SemanticTableObject(t.image, "IDENTIFICADOR", "program", "", "", false, -1));
        }
        <SIMBOLO_PONTO_E_VIRGULA> { t = getToken(0); System.out.println("SIMBOLO_PONTO_E_VIRGULA Sintax: "+t.image); }
        [ parteDeclaracaoVariaveis() { declaracoesParaSemantica(); } ]
        [ parteDeclaracaoSubrotinas() ] 
        auxPrograma()
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        bloco();
        //System.out.println("!!!! PROGRAMA !!!!");
    }
}


void auxPrograma(): {Token t = new Token();}
{
    try {
        <RSV_BEGIN> { t = getToken(0); System.out.println("RSV_BEGIN Sintax: "+t.image); esvaziarArraysLists(listaLexemasSemantico); }
        comando()
        ( <SIMBOLO_PONTO_E_VIRGULA> { t = getToken(0); System.out.println("SIMBOLO_PONTO_E_VIRGULA Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "SIMBOLO_PONTO_E_VIRGULA"))); }
          comando() )*
        <RSV_FIM> { t = getToken(0); System.out.println("RSV_FIM Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "RSV_FIM"))); comandoParaSemantica(listaLexemasSemantico); }
    }catch (ParseException e) {
        Token token = new Token();
        token = getToken(0);
        if(token.kind == RSV_END)
            error_skipto(e, new ArrayList<>(Arrays.asList(EOF)));
        else {
            armazenamentoErros(e.toString());
            comando();
        }
    }
}

void bloco(): {Token t = new Token();}
{
    try {
        [ parteDeclaracaoVariaveis() ]
        [ parteDeclaracaoSubrotinas() ]
        comandoComposto()
    }catch (ParseException e) {
        armazenamentoErros(e.toString());
        //error_skipto(e, new ArrayList<>(Arrays.asList(EOF)));
        bloco();
    }
}

void parteDeclaracaoVariaveis(): {Token t = new Token();}
{
    try {
        declaracaoVariavel()
        <SIMBOLO_PONTO_E_VIRGULA> { t = getToken(0); System.out.println("SIMBOLO_PONTO_E_VIRGULA Sintax: "+t.image); }
        auxParteDeclaracaoVariaveis()
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, RSV_BEGIN)));
        comando();
        //System.out.println("!!!! parteDeclaracaoVariaveis !!!!");
    }
}

void auxParteDeclaracaoVariaveis(): {Token t = new Token();}
{
    try {
        declaracaoVariavel()
        <SIMBOLO_PONTO_E_VIRGULA> { t = getToken(0); System.out.println("SIMBOLO_PONTO_E_VIRGULA Sintax: "+t.image); }
        auxParteDeclaracaoVariaveis()
        | {}
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, RSV_BEGIN)));
        comando();
        System.out.println("!!!! auxParteDeclaracaoVariaveis !!!!");
    }
}

void declaracaoVariavel(): {Token t = new Token();}
{
   try {
    ( ( <TIPO_BOOLEAN> { t = getToken(0); System.out.println("TIPO_BOOLEAN Sintax: "+t.image); listaDeclaracoes.add(t.image); }
        |<TIPO_INT> { t = getToken(0); System.out.println("TIPO_INT Sintax: "+t.image); listaDeclaracoes.add(t.image); } )
    listaIdentificadores() )
   }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, RSV_BEGIN)));
        comando();
   }
}

void listaIdentificadores(): {Token t = new Token();}
{
    try {
        <IDENTIFICADOR> { t = getToken(0); System.out.println("IDENTIFICADOR Sintax: "+t.image); listaDeclaracoes.add(t.image); }
        (
          <SIMBOLO_VIRGULA> { t = getToken(0); System.out.println("SIMBOLO_VIRGULA Sintax: "+t.image); }
          <IDENTIFICADOR> { t = getToken(0); System.out.println("IDENTIFICADOR Sintax: "+t.image); listaDeclaracoes.add(t.image); }
        )*
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, RSV_BEGIN)));
        comando();
    }
}

void parteDeclaracaoSubrotinas(): {Token t = new Token();}
{
    try {
        ( declaracaoProcedimento() 
          <SIMBOLO_PONTO_E_VIRGULA> { t = getToken(0); System.out.println("SIMBOLO_PONTO_E_VIRGULA Sintax: "+t.image); }
        )+
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        /* error_skipto(new ArrayList<>(Arrays.asList(SIMBOLO_PONTO_E_VIRGULA, SIMBOLO_PONTO)));
        return; */
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, RSV_BEGIN)));
        comando();
    }
}

void declaracaoProcedimento(): {Token t = new Token();}
{
    try {
        <RSV_PROCEDIMENTO> { t = getToken(0); System.out.println("RSV_PROCEDIMENTO Sintax: "+t.image); }
        <IDENTIFICADOR> { t = getToken(0); System.out.println("IDENTIFICADOR Sintax: "+t.image); }
        [ parametrosFormais() ]
        <SIMBOLO_PONTO_E_VIRGULA> { t = getToken(0); System.out.println("SIMBOLO_PONTO_E_VIRGULA Sintax: "+t.image); }
        bloco()
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        /* error_skipto(new ArrayList<>(Arrays.asList(SIMBOLO_PONTO_E_VIRGULA)));
        parteDeclaracaoSubrotinas(); */
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, RSV_BEGIN)));
        comando();
    }
}

void parametrosFormais(): {Token t = new Token();}
{
    try {
        <PARENTESES_ESQ> { t = getToken(0); System.out.println("PARENTESES_ESQ Sintax: "+t.image); }
        secaoParametrosFormais()
        ( <SIMBOLO_PONTO_E_VIRGULA> { t = getToken(0); System.out.println("SIMBOLO_PONTO_E_VIRGULA Sintax: "+t.image); }
          secaoParametrosFormais() )*
        <PARENTESES_DIR> { t = getToken(0); System.out.println("PARENTESES_DIR Sintax: "+t.image); }
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        /* error_skipto(new ArrayList<>(Arrays.asList(SIMBOLO_PONTO_E_VIRGULA)));
        bloco(); */
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, RSV_BEGIN)));
        comando();
    }
}

void secaoParametrosFormais(): {Token t = new Token();}
{
    try {
        [ <RSV_VAR> { t = getToken(0); System.out.println("RSV_VAR Sintax: "+t.image); } ]
        listaIdentificadores()
        <SIMBOLO_DOIS_PONTOS> { t = getToken(0); System.out.println("SIMBOLO_DOIS_PONTOS Sintax: "+t.image); }
        ( <TIPO_BOOLEAN> { t = getToken(0); System.out.println("TIPO_BOOLEAN Sintax: "+t.image); }
          |<TIPO_INT> { t = getToken(0); System.out.println("TIPO_INT Sintax: "+t.image); } )
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, RSV_BEGIN)));
        comando();
    }
}

void comandoComposto() : {Token t = new Token();}
{
    try {
        <RSV_BEGIN> { t = getToken(0); System.out.println("RSV_BEGIN Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "RSV_BEGIN"))); }
        comando()
        ( <SIMBOLO_PONTO_E_VIRGULA> { t = getToken(0); System.out.println("SIMBOLO_PONTO_E_VIRGULA Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "SIMBOLO_PONTO_E_VIRGULA"))); }
          comando() )*
        <RSV_END> { t = getToken(0); System.out.println("RSV_END Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "RSV_END"))); }
    }catch (ParseException e) {
        //error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        Token token = new Token();
        token = getToken(0);
        if(token.kind == RSV_END)
            error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        else {
            armazenamentoErros(e.toString());
            comando();
        }
    }
}

void comando() : {Token t = new Token();}
{
    try {
        atribuicao()
        |chamadaProcedimento()
        |comandoComposto()
        |comandoCondicional()
        |comandoRepetitivo()
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF)));
    }
}

void comandoRepetitivo() : {Token t = new Token();}
{
    try {
        <RSV_WHILE> { t = getToken(0); System.out.println("RSV_WHILE Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "RSV_WHILE"))); }
        expressao()
        <RSV_DO> { t = getToken(0); System.out.println("RSV_DO Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "RSV_DO"))); }
        comando() { listaLexemasSemantico.add(new ArrayList<>(Arrays.asList("$", "$"))); }
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, RSV_DO, SIMBOLO_PONTO_E_VIRGULA)));
        comando();
    }
}

void comandoCondicional() : {Token t = new Token();}
{
    try {
        <RSV_IF> { t = getToken(0); System.out.println("RSV_IF Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "RSV_IF"))); }
        expressao()
        <RSV_THEN> { t = getToken(0); System.out.println("RSV_THEN Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "RSV_THEN"))); }
        comando() { listaLexemasSemantico.add(new ArrayList<>(Arrays.asList("$", "$"))); }
        auxComandoCondicional()
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, RSV_THEN, SIMBOLO_PONTO_E_VIRGULA)));
        comando();
    }
}

void auxComandoCondicional() : {Token t = new Token();}
{
    try {
        <RSV_ELSE> { t = getToken(0); System.out.println("RSV_ELSE Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "RSV_ELSE"))); }
          comando() { listaLexemasSemantico.add(new ArrayList<>(Arrays.asList("$", "$"))); }
        | {}
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        comando();
    }
}

void chamadaProcedimento() : {Token t = new Token();}
{
    try {
        ( <RSV_READ> { t = getToken(0); System.out.println("RSV_READ Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "RSV_READ"))); }
          | <RSV_WRITE> { t = getToken(0); System.out.println("RSV_WRITE Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "RSV_WRITE"))); } )
        <PARENTESES_ESQ> { t = getToken(0); System.out.println("PARENTESES_ESQ Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "PARENTESES_ESQ"))); }
        [ listaExpressoes() ]
        <PARENTESES_DIR> { t = getToken(0); System.out.println("PARENTESES_DIR Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "PARENTESES_DIR"))); }
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        comando();
    }
}

void atribuicao() : {Token t = new Token();}
{
    try {
        variavel()
        <OPERADOR_ARITMETICO_ATRIBUICAO> { t = getToken(0); System.out.println("OPERADOR_ARITMETICO_ATRIBUICAO Sintax: "+t.image); }
        expressao()
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        comando();
    }
}

void listaExpressoes() : {Token t = new Token();}
{
    try {
        expressao()
        ( <SIMBOLO_VIRGULA> { t = getToken(0); System.out.println("SIMBOLO_VIRGULA Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "SIMBOLO_VIRGULA"))); }
          expressao() )*
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        comando();
    }
}

void expressao() : {Token t = new Token();}
{
    try {
        expressaoSimples()
        auxExpressao()
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF)));
    }
}

void auxExpressao() : {Token t = new Token();}
{
    try {
        relacao() expressaoSimples()
        | {}
    }catch (ParseException e) {
       //armazenamentoErros(e.toString());
       error_skipto(e, new ArrayList<>(Arrays.asList(EOF)));
    }
}

void expressaoSimples() : {Token t = new Token();}
{
    try {
        [ <OPERADOR_ARITMETICO_ADICAO> { t = getToken(0); System.out.println("OPERADOR_ARITMETICO_ADICAO Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "OPERADOR_ARITMETICO_ADICAO"))); }
          |<OPERADOR_ARITMETICO_SUBTRACAO> { t = getToken(0); System.out.println("OPERADOR_ARITMETICO_SUBTRACAO Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "OPERADOR_ARITMETICO_SUBTRACAO"))); } ]
        termo()
        auxExpressaoSimples()
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        comando();
    }
}

void auxExpressaoSimples() : {Token t = new Token();}
{
    try {
        ( <OPERADOR_ARITMETICO_ADICAO> { t = getToken(0); System.out.println("OPERADOR_ARITMETICO_ADICAO Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "OPERADOR_ARITMETICO_ADICAO"))); }
          |<OPERADOR_ARITMETICO_SUBTRACAO> { t = getToken(0); System.out.println("OPERADOR_ARITMETICO_SUBTRACAO Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "OPERADOR_ARITMETICO_SUBTRACAO"))); }
          |<OPERADOR_LOGICO_OR> { t = getToken(0); System.out.println("OPERADOR_LOGICO_OR Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "OPERADOR_LOGICO_OR"))); } )
        termo()
        auxExpressaoSimples()
        | {}
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        comando();
    }
}

void termo() : {Token t = new Token();}
{
    try {
        fator()
        auxTermo()
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF)));
    }
}

void auxTermo() : {Token t = new Token();}
{
    try {
        ( <OPERADOR_ARITMETICO_MULTIPLICACAO> { t = getToken(0); System.out.println("OPERADOR_ARITMETICO_MULTIPLICACAO Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "OPERADOR_ARITMETICO_MULTIPLICACAO"))); }
          |<OPERADOR_ARITMETICO_DIVISAO> { t = getToken(0); System.out.println("OPERADOR_ARITMETICO_DIVISAO Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "OPERADOR_ARITMETICO_DIVISAO"))); }
          |<OPERADOR_LOGICO_AND> { t = getToken(0); System.out.println("OPERADOR_LOGICO_AND Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "OPERADOR_LOGICO_AND"))); } )
        fator()
        auxTermo()
        | {}
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        comando();
    }
}

void fator() : {Token t = new Token();}
{
    try {
        variavel()
        |<NUMERO_INTEIRO> { t = getToken(0); System.out.println("NUMERO_INTEIRO Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "NUMERO_INTEIRO")));}
        |( <PARENTESES_ESQ> { t = getToken(0); System.out.println("PARENTESES_ESQ Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "PARENTESES_ESQ")));}
           expressao()
           <PARENTESES_DIR> { t = getToken(0); System.out.println("PARENTESES_DIR Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "PARENTESES_DIR")));} )
        |( <OPERADOR_LOGICO_NOT> { t = getToken(0); System.out.println("OPERADOR_LOGICO_NOT Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "OPERADOR_LOGICO_NOT")));}
           fator() )
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        comando();
    }
}

void variavel() : {Token t = new Token();}
{
    try {
        <IDENTIFICADOR> { t = getToken(0); System.out.println("IDENTIFICADOR Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "IDENTIFICADOR")));}
        auxVariavel()
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        comando();
    }
}

void auxVariavel() : {Token t = new Token();}
{
    try {
        expressao()
        | {}
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF)));
    }
}

void relacao() : {Token t = new Token();}
{
    try {
        <OPERADOR_LOGICO_IGUAL_IGUAL> { t = getToken(0); System.out.println("OPERADOR_LOGICO_IGUAL_IGUAL Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "OPERADOR_LOGICO_IGUAL_IGUAL")));}
        |<OPERADOR_LOGICO_DIFERENCA> { t = getToken(0); System.out.println("OPERADOR_LOGICO_DIFERENCA Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "OPERADOR_LOGICO_DIFERENCA")));}
        |<OPERADOR_LOGICO_MENOR> { t = getToken(0); System.out.println("OPERADOR_LOGICO_MENOR Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "OPERADOR_LOGICO_MENOR")));}
        |<OPERADOR_LOGICO_MENOR_IGUAL> { t = getToken(0); System.out.println("OPERADOR_LOGICO_MENOR_IGUAL Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "OPERADOR_LOGICO_MENOR_IGUAL")));}
        |<OPERADOR_LOGICO_MAIOR_IGUAL> { t = getToken(0); System.out.println("OPERADOR_LOGICO_MAIOR_IGUAL Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "OPERADOR_LOGICO_MAIOR_IGUAL")));}
        |<OPERADOR_LOGICO_MAIOR> { t = getToken(0); System.out.println("OPERADOR_LOGICO_MAIOR Sintax: "+t.image); listaLexemasSemantico.add(new ArrayList<>(Arrays.asList(t.image, "OPERADOR_LOGICO_MAIOR")));}
    }catch (ParseException e) {
        //armazenamentoErros(e.toString());
        error_skipto(e, new ArrayList<>(Arrays.asList(EOF, SIMBOLO_PONTO_E_VIRGULA)));
        comando();
    }
}